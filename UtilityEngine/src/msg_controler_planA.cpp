/**
* @file msg_controler_planA.cpp
*
* @author Hourui (liquidmonkey)
*/

#include "msg_controler_planA.hpp"
#include "logger.hpp"

namespace Utility
{
////////////////////////////////////////////////////////////////////////////////////////////////////
namespace msg
{
////////////////////////////////////////////////////////////////////////////////////////////////////
namespace planA
{
////////////////////////////////////////////////////////////////////////////////////////////////////
controler::controler(void)
: m_dispatcher(nullptr)
{}
////////////////////////////////////////////////////////////////////////////////////////////////////
void
controler::init(dispatch_t* dispatcher)
{
	if (m_dispatcher)
		Clog::error_throw(errors::logic, "controler initialized!");

	m_dispatcher = dispatcher;
}
////////////////////////////////////////////////////////////////////////////////////////////////////
std::uint32_t&
controler::key_pares_t(const char* msg)
{
	return *((std::uint32_t*)(msg)+1);
}
////////////////////////////////////////////////////////////////////////////////////////////////////
void
controler::post_request(task::object_iface* obj, std::uint32_t compkey, mem::buffer_iface* buffer, void* ptr)
{
	unsigned long len = 0;
	const char* p = nullptr;
	if (buffer)
	{
		p = m_pares(buffer, len);
		if (!p)
		{
			if (len > MAX_PACKET_LEN)
				obj->handle_error(compkey);

			return;
		}
		buffer->set_read_limit(len);
	}
	m_dispatcher->dispatch({ this, obj, compkey, buffer, ptr });
}
////////////////////////////////////////////////////////////////////////////////////////////////////
void
controler::handle_wrap(task::object_iface* obj, std::uint32_t compkey, mem::buffer_iface* buffer, void* ptr)
{
	if (!buffer)
	{
		obj->do_close(ptr);
		return;
	}

	if (obj->compkey() != compkey)
		return;

	unsigned long size = buffer->get_read_limit();
	handler_t handle = get_handle(key_pares_t(buffer->read(size)));
	if (!handle || handle(obj, buffer, ptr) != 0)
	{
		obj->handle_error(compkey);
		return;
	}

	buffer->commit_read(buffer->get_read_limit());
	post_request(obj, compkey, buffer, ptr);
}
////////////////////////////////////////////////////////////////////////////////////////////////////
}//namespace planA
////////////////////////////////////////////////////////////////////////////////////////////////////
}//namespace task
////////////////////////////////////////////////////////////////////////////////////////////////////
}//namespace Utility 